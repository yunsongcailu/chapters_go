// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: stream.proto

package streampb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamDemoServerClient is the client API for StreamDemoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDemoServerClient interface {
	// 服务端流模式示例 关键词 stream
	GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamDemoServer_GetStreamClient, error)
	// 客户端流模式
	PutStream(ctx context.Context, opts ...grpc.CallOption) (StreamDemoServer_PutStreamClient, error)
	// 双向流模式
	AllStream(ctx context.Context, opts ...grpc.CallOption) (StreamDemoServer_AllStreamClient, error)
}

type streamDemoServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDemoServerClient(cc grpc.ClientConnInterface) StreamDemoServerClient {
	return &streamDemoServerClient{cc}
}

func (c *streamDemoServerClient) GetStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (StreamDemoServer_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDemoServer_ServiceDesc.Streams[0], "/stream_proto.StreamDemoServer/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDemoServerGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamDemoServer_GetStreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamDemoServerGetStreamClient struct {
	grpc.ClientStream
}

func (x *streamDemoServerGetStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDemoServerClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (StreamDemoServer_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDemoServer_ServiceDesc.Streams[1], "/stream_proto.StreamDemoServer/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDemoServerPutStreamClient{stream}
	return x, nil
}

type StreamDemoServer_PutStreamClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamDemoServerPutStreamClient struct {
	grpc.ClientStream
}

func (x *streamDemoServerPutStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamDemoServerPutStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDemoServerClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (StreamDemoServer_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamDemoServer_ServiceDesc.Streams[2], "/stream_proto.StreamDemoServer/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDemoServerAllStreamClient{stream}
	return x, nil
}

type StreamDemoServer_AllStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamDemoServerAllStreamClient struct {
	grpc.ClientStream
}

func (x *streamDemoServerAllStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamDemoServerAllStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDemoServerServer is the server API for StreamDemoServer service.
// All implementations must embed UnimplementedStreamDemoServerServer
// for forward compatibility
type StreamDemoServerServer interface {
	// 服务端流模式示例 关键词 stream
	GetStream(*StreamRequest, StreamDemoServer_GetStreamServer) error
	// 客户端流模式
	PutStream(StreamDemoServer_PutStreamServer) error
	// 双向流模式
	AllStream(StreamDemoServer_AllStreamServer) error
	mustEmbedUnimplementedStreamDemoServerServer()
}

// UnimplementedStreamDemoServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamDemoServerServer struct {
}

func (UnimplementedStreamDemoServerServer) GetStream(*StreamRequest, StreamDemoServer_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedStreamDemoServerServer) PutStream(StreamDemoServer_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (UnimplementedStreamDemoServerServer) AllStream(StreamDemoServer_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}
func (UnimplementedStreamDemoServerServer) mustEmbedUnimplementedStreamDemoServerServer() {}

// UnsafeStreamDemoServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDemoServerServer will
// result in compilation errors.
type UnsafeStreamDemoServerServer interface {
	mustEmbedUnimplementedStreamDemoServerServer()
}

func RegisterStreamDemoServerServer(s grpc.ServiceRegistrar, srv StreamDemoServerServer) {
	s.RegisterService(&StreamDemoServer_ServiceDesc, srv)
}

func _StreamDemoServer_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDemoServerServer).GetStream(m, &streamDemoServerGetStreamServer{stream})
}

type StreamDemoServer_GetStreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type streamDemoServerGetStreamServer struct {
	grpc.ServerStream
}

func (x *streamDemoServerGetStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamDemoServer_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamDemoServerServer).PutStream(&streamDemoServerPutStreamServer{stream})
}

type StreamDemoServer_PutStreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamDemoServerPutStreamServer struct {
	grpc.ServerStream
}

func (x *streamDemoServerPutStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamDemoServerPutStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamDemoServer_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamDemoServerServer).AllStream(&streamDemoServerAllStreamServer{stream})
}

type StreamDemoServer_AllStreamServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamDemoServerAllStreamServer struct {
	grpc.ServerStream
}

func (x *streamDemoServerAllStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamDemoServerAllStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDemoServer_ServiceDesc is the grpc.ServiceDesc for StreamDemoServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamDemoServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_proto.StreamDemoServer",
	HandlerType: (*StreamDemoServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _StreamDemoServer_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _StreamDemoServer_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _StreamDemoServer_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
